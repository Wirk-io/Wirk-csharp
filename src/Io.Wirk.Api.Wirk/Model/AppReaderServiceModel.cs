/* 
 * Wirk
 *
 * API for api.wirk.io
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Io.Wirk.Api.Wirk.Model
{
    /// <summary>
    /// Model for App
    /// </summary>
    [DataContract]
    public partial class AppReaderServiceModel :  IEquatable<AppReaderServiceModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppReaderServiceModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppReaderServiceModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppReaderServiceModel" /> class.
        /// </summary>
        /// <param name="AppName">AppName (required).</param>
        /// <param name="HasInstruction">HasInstruction.</param>
        /// <param name="HasQuestionOptions">HasQuestionOptions.</param>
        /// <param name="IdApp">IdApp.</param>
        /// <param name="Qualities">Qualities.</param>
        /// <param name="TitleQuestionOptions">TitleQuestionOptions.</param>
        public AppReaderServiceModel(string AppName = null, bool? HasInstruction = null, bool? HasQuestionOptions = null, int? IdApp = null, List<QualityReaderServiceModel> Qualities = null, string TitleQuestionOptions = null)
        {
            // to ensure "AppName" is required (not null)
            if (AppName == null)
            {
                throw new InvalidDataException("AppName is a required property for AppReaderServiceModel and cannot be null");
            }
            else
            {
                this.AppName = AppName;
            }
            this.HasInstruction = HasInstruction;
            this.HasQuestionOptions = HasQuestionOptions;
            this.IdApp = IdApp;
            this.Qualities = Qualities;
            this.TitleQuestionOptions = TitleQuestionOptions;
        }
        
        /// <summary>
        /// Gets or Sets AppName
        /// </summary>
        [DataMember(Name="AppName", EmitDefaultValue=false)]
        public string AppName { get; set; }
        /// <summary>
        /// Gets or Sets HasInstruction
        /// </summary>
        [DataMember(Name="HasInstruction", EmitDefaultValue=false)]
        public bool? HasInstruction { get; set; }
        /// <summary>
        /// Gets or Sets HasQuestionOptions
        /// </summary>
        [DataMember(Name="HasQuestionOptions", EmitDefaultValue=false)]
        public bool? HasQuestionOptions { get; set; }
        /// <summary>
        /// Gets or Sets IdApp
        /// </summary>
        [DataMember(Name="IdApp", EmitDefaultValue=false)]
        public int? IdApp { get; set; }
        /// <summary>
        /// Gets or Sets Qualities
        /// </summary>
        [DataMember(Name="Qualities", EmitDefaultValue=false)]
        public List<QualityReaderServiceModel> Qualities { get; set; }
        /// <summary>
        /// Gets or Sets TitleQuestionOptions
        /// </summary>
        [DataMember(Name="TitleQuestionOptions", EmitDefaultValue=false)]
        public string TitleQuestionOptions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppReaderServiceModel {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  HasInstruction: ").Append(HasInstruction).Append("\n");
            sb.Append("  HasQuestionOptions: ").Append(HasQuestionOptions).Append("\n");
            sb.Append("  IdApp: ").Append(IdApp).Append("\n");
            sb.Append("  Qualities: ").Append(Qualities).Append("\n");
            sb.Append("  TitleQuestionOptions: ").Append(TitleQuestionOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AppReaderServiceModel);
        }

        /// <summary>
        /// Returns true if AppReaderServiceModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AppReaderServiceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppReaderServiceModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AppName == other.AppName ||
                    this.AppName != null &&
                    this.AppName.Equals(other.AppName)
                ) && 
                (
                    this.HasInstruction == other.HasInstruction ||
                    this.HasInstruction != null &&
                    this.HasInstruction.Equals(other.HasInstruction)
                ) && 
                (
                    this.HasQuestionOptions == other.HasQuestionOptions ||
                    this.HasQuestionOptions != null &&
                    this.HasQuestionOptions.Equals(other.HasQuestionOptions)
                ) && 
                (
                    this.IdApp == other.IdApp ||
                    this.IdApp != null &&
                    this.IdApp.Equals(other.IdApp)
                ) && 
                (
                    this.Qualities == other.Qualities ||
                    this.Qualities != null &&
                    this.Qualities.SequenceEqual(other.Qualities)
                ) && 
                (
                    this.TitleQuestionOptions == other.TitleQuestionOptions ||
                    this.TitleQuestionOptions != null &&
                    this.TitleQuestionOptions.Equals(other.TitleQuestionOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AppName != null)
                    hash = hash * 59 + this.AppName.GetHashCode();
                if (this.HasInstruction != null)
                    hash = hash * 59 + this.HasInstruction.GetHashCode();
                if (this.HasQuestionOptions != null)
                    hash = hash * 59 + this.HasQuestionOptions.GetHashCode();
                if (this.IdApp != null)
                    hash = hash * 59 + this.IdApp.GetHashCode();
                if (this.Qualities != null)
                    hash = hash * 59 + this.Qualities.GetHashCode();
                if (this.TitleQuestionOptions != null)
                    hash = hash * 59 + this.TitleQuestionOptions.GetHashCode();
                return hash;
            }
        }
    }

}
